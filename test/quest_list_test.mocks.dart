// Mocks generated by Mockito 5.2.0 from annotations
// in photo_quest/test/quest_list_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:cloud_firestore/cloud_firestore.dart' as _i4;
import 'package:firebase_auth/firebase_auth.dart' as _i3;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i5;
import 'package:location/location.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:photo_quest/quest.dart' as _i8;
import 'package:photo_quest/quest_list.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeLocation_0 extends _i1.Fake implements _i2.Location {}

class _FakeUser_1 extends _i1.Fake implements _i3.User {}

class _FakeCollectionReference_2<T extends Object?> extends _i1.Fake
    implements _i4.CollectionReference<T> {}

class _FakeLatLng_3 extends _i1.Fake implements _i5.LatLng {}

/// A class which mocks [QuestNodeList].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestNodeList extends _i1.Mock implements _i6.QuestNodeList {
  MockQuestNodeList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Location get currentLocation =>
      (super.noSuchMethod(Invocation.getter(#currentLocation),
          returnValue: _FakeLocation_0()) as _i2.Location);
  @override
  set currentLocation(_i2.Location? _currentLocation) =>
      super.noSuchMethod(Invocation.setter(#currentLocation, _currentLocation),
          returnValueForMissingStub: null);
  @override
  _i3.User get user =>
      (super.noSuchMethod(Invocation.getter(#user), returnValue: _FakeUser_1())
          as _i3.User);
  @override
  _i4.CollectionReference<Object?> get completedIDs =>
      (super.noSuchMethod(Invocation.getter(#completedIDs),
              returnValue: _FakeCollectionReference_2<Object?>())
          as _i4.CollectionReference<Object?>);
  @override
  set completedIDs(_i4.CollectionReference<Object?>? _completedIDs) =>
      super.noSuchMethod(Invocation.setter(#completedIDs, _completedIDs),
          returnValueForMissingStub: null);
  @override
  _i7.Future<List<dynamic>> getCompletedList() =>
      (super.noSuchMethod(Invocation.method(#getCompletedList, []),
              returnValue: Future<List<dynamic>>.value(<dynamic>[]))
          as _i7.Future<List<dynamic>>);
  @override
  dynamic addCompletedList(_i8.QuestNode? node) =>
      super.noSuchMethod(Invocation.method(#addCompletedList, [node]));
  @override
  _i7.Future<_i5.LatLng> getLocation() =>
      (super.noSuchMethod(Invocation.method(#getLocation, []),
              returnValue: Future<_i5.LatLng>.value(_FakeLatLng_3()))
          as _i7.Future<_i5.LatLng>);
  @override
  String getDistance(_i5.LatLng? coord1, _i5.LatLng? coord2) =>
      (super.noSuchMethod(Invocation.method(#getDistance, [coord1, coord2]),
          returnValue: '') as String);
  @override
  _i7.Future<dynamic> refreshFriends(_i3.User? user) =>
      (super.noSuchMethod(Invocation.method(#refreshFriends, [user]),
          returnValue: Future<dynamic>.value()) as _i7.Future<dynamic>);
  @override
  void select(_i8.QuestNode? node) =>
      super.noSuchMethod(Invocation.method(#select, [node]),
          returnValueForMissingStub: null);
  @override
  void selectAll(String? searchType) =>
      super.noSuchMethod(Invocation.method(#selectAll, [searchType]),
          returnValueForMissingStub: null);
  @override
  void deselectAll(String? searchType) =>
      super.noSuchMethod(Invocation.method(#deselectAll, [searchType]),
          returnValueForMissingStub: null);
  @override
  void deselect(_i8.QuestNode? node) =>
      super.noSuchMethod(Invocation.method(#deselect, [node]),
          returnValueForMissingStub: null);
  @override
  bool checkSelected(_i8.QuestNode? node) =>
      (super.noSuchMethod(Invocation.method(#checkSelected, [node]),
          returnValue: false) as bool);
  @override
  bool checkCreated(_i8.QuestNode? node) =>
      (super.noSuchMethod(Invocation.method(#checkCreated, [node]),
          returnValue: false) as bool);
  @override
  void complete(_i8.QuestNode? node) =>
      super.noSuchMethod(Invocation.method(#complete, [node]),
          returnValueForMissingStub: null);
  @override
  List<_i8.QuestNode> getQuestNodes() =>
      (super.noSuchMethod(Invocation.method(#getQuestNodes, []),
          returnValue: <_i8.QuestNode>[]) as List<_i8.QuestNode>);
  @override
  List<_i8.QuestNode> getCompletedQuests() =>
      (super.noSuchMethod(Invocation.method(#getCompletedQuests, []),
          returnValue: <_i8.QuestNode>[]) as List<_i8.QuestNode>);
}
